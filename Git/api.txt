
$ mkdir learngit 	//创建目录
$ cd learngit 	//cd	
$ pwd 	//查看当前目录

$ git init 	// 命令把这个目录变成Git可以管理的仓库

$ git add readme.txt 	//添加
$ git commit -m "add distributed" 	//提交	

$ git status	//查看状态
$ git diff readme.txt 	//查看修改内容

$ git log	//查看日记
$ git log --pretty=oneline 	//简要查看日记

$ git reset --hard HEAD^ 	//回退版本  HEAD=当前版本 上上个版本=HEAD^^ 也可以写成 HEAD~2
$ git reset --hard 3628164 	//通过commit id 退回版本

$ cat readme.txt 	//查看文件
$ git reflog 	//查看历史命令

$ git reset HEAD readme.txt 	// 把暂存区的修改撤销掉,没提交commit之前
$ git checkout -- readme.txt 	// 丢弃工作区的修改,让这个文件回到最近一次git commit或git add时的状态。

$ rm test.txt	// 删除
$ git rm test.txt	// 确认删除
$ git commit -m "remove test.txt" 	// 提交
$ git checkout -- test.txt 				// 删错了,用版本库里的版本替换工作区的版本

$ ssh-keygen -t rsa -C "youremail@example.com" 	// C:\Users\Administrator\.ssh
$ git remote add origin git@github.com:wendt-li/gitApi.git    // 在github创建项目后，
$ git push -u origin master 		// 第一次提交，之后git push origin master推送最新修改

$ git clone git@github.com:michaelliao/gitskills.git  	// 克隆项目

$ git branch dev 	//创建分支
$ git checkout dev 	//切换分支
$ git checkout -b dev	//上面两条指令简写
$ git branch	//查看当前分支
$ git checkout master 	//切会主分支
$ git merge dev 	//合并分支内容
$ git branch -d dev 	//删除分支
$ git branch -D feat 	//强制删除
$ git log --graph --pretty=oneline --abbrev-commit 	//查看分支合并情况
$ git merge --no-ff -m "merge with no-ff" dev 	//--no-ff参数，表示禁用Fast forward,创建一个新的commit，所以加上-m参数，把commit描述写进去

$ git stash 	//把当前工作现场“储藏”起来，等以后恢复现场后继续工作
$ git stash list 	// 查看stashlist
$ git merge master 	// 建议先合并其他分支提交内容
$ git stash pop 	// 恢复并删除stash内容，等于下面两条
$ git stash apply stash@{0} 	//恢复
$ git stash drop stash@{0} 	//删除stash内容

$ git remote 	//查看远程库
$ git remote -v 	//详细查看
$ git checkout -b dev origin/dev 	//创建远程origin的dev分支到本地
$ git push origin dev 	//dev push到远程
$ git pull 	//抓取远程新的提交